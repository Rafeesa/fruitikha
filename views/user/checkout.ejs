<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Fruitikha</title>
   

    <!-- favicon -->
    <link rel="shortcut icon" type="image/png" href="assets/img/favicon.png">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- FontAwesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <link rel="stylesheet" href="/assets/css/main.css">
    

    <style>
       html, body {
    margin: 0;
    padding: 0;
    width: 100%;
}


        .navbar-brand img {
            width: 120px;
            height: 100%;
        }
        /* Navbar background */
        .custom-navbar {
            background-color: #051922;
            padding: 10px 15px;
        }
        /* Account menu styling */
        .account-menu {
            color: white;
            position: relative;
        }
        /* Dropdown menu */
        .account-menu .dropdown-menu {
            position: absolute;
            top: 100%; /* Right below the Account button */
            left: 0; /* Align to the left of the parent div */
            background-color: #051922;
            border: none;
            min-width: 150px;
        }
        /* Dropdown items */
        .account-menu .dropdown-item {
            color: white;
            transition: background-color 0.3s ease;
        }
        .account-menu .dropdown-item:hover {
            background-color: #ff6600;
        }
        /* Navbar elements alignment */
        .navbar .navbar-nav .nav-link {
            color: white;
        }
        .page-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    margin: 0; /* Ensure no margin */
}

        .content-wrap {
            flex: 1;
        }
        
        

        .order-summary-table td, .order-summary-table th {
            padding: 10px;
        }
        .address-card {
            border: 1px solid #ccc;
            padding: 15px;
            margin-bottom: 15px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .address-card:hover {
            background-color: #f0f0f0;
        }
        .selected-address {
            border-color: #007bff;
            background-color: #e7f1ff;
        }
        /* Custom radio button styling */
.form-check-input:checked {
    background-color:#051922;
    border-color:#051922;
}

/* Optional: Change the outline color when selected */
.form-check-input:focus {
    border-color:#051922;
    box-shadow: 0 0 0 0.25rem rgba(255, 102, 0, 0.25);
}
     

    </style>
</head>
<body>

    <nav class="navbar navbar-expand-lg navbar-light custom-navbar shadow-sm">
        <div class="container">
            <a class="navbar-brand" href="/">
                <img src="/assets/img/logo.png" alt="Fruitikha" width="120">
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" 
                    data-bs-target="#navbarNav" aria-controls="navbarNav" 
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
    
            <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
                <ul class="navbar-nav text-center">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/shop">Shop</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/profile">Profile</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/cart">Cart</a>
                    </li>
                </ul>
            </div>
             <!-- Left Side: Account Menu -->
             <div class="account-menu">
                <a class="nav-link dropdown-toggle" href="#" role="button" 
                   data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-user"></i> Account
                </a>
                <ul class="dropdown-menu">
                    <% if (user) { %>
                        <li><a class="dropdown-item" href="/logout">Logout</a></li>
                    <% } else { %>
                        <li><a class="dropdown-item" href="/login">Login</a></li>
                        <li><a class="dropdown-item" href="/signup">Sign Up</a></li>
                    <% } %>
                </ul>
            </div>
        </div>
    </nav>
    <br><br>  <br><br>
    
    <div class="container">
        <div class="row">
            <!-- Display Available Coupons Section -->
            <div class="col-lg-6 mb-sm-15">
                <div class="toggle_info">
                    <span>
                        <i class="fi-rs-user mr-10"></i><span class="text-muted"></span> 
                        <a href="/available" data-bs-toggle="collapse" class="collapsed" aria-expanded="false" style="color:#ff6600">Available Coupons?</a>
                    </span>
                </div>
                <div class="panel-collapse collapse" id="availableCoupons">
                    <table id="coupon-table">
                        <!-- Dynamic coupon rows will be injected here by JavaScript -->
                    </table>
                </div>
            </div>
   
            <!-- Apply Coupon Section -->
            <div class="col-lg-6">
                <div class="toggle_info">
                    <span>
                        <i class="fi-rs-label mr-10"></i><span class="text-muted">Have a coupon?</span>
                        <a href="#coupon" data-bs-toggle="collapse" class="collapsed" aria-expanded="false" style="color:#ff6600">Click here to enter your code</a>
                    </span>
                </div>
                <div class="panel-collapse collapse coupon_form" id="coupon">
                    <div class="panel-body">
                        <p class="mb-30 font-sm">If you have a coupon code, please apply it below.</p>
                        <span id="showcouponmessage" class="text-primary"></span>
                        <div class="form-group">
                            <input type="text" placeholder="Enter Coupon Code..." id="coupon-entered">
                        </div>
                        <br>
                        <div class="form-group">
                            <button class="btn btn-secondary" onclick="applyCoupon()">Apply Coupon</button>
                           
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Main Checkout Content -->
    <div class="container mt-5 mb-5 content-wrap">
        <div class="row">
            <!-- Left Side - Address -->
            <div class="col-lg-6">
                <h3 class="mb-4">Shipping Address</h3>
                <div class="border p-3 mb-3">
                    <% if (addresses.length > 0) { %>
                        <form action="/checkout" method="POST" id="addressForm">
                            <div id="addressSelection">
                                <% addresses.forEach(addr => { %>
                                    <div class="address-card" onclick="selectAddress('<%= addr._id %>')">
                                        <p><strong>Name:</strong> <%= addr.name %></p>
                                        <p><strong>House Name:</strong> <%= addr.houseName %></p>
                                        <p><strong>City:</strong> <%= addr.city %></p>
                                        <p><strong>State:</strong> <%= addr.state %></p>
                                        <p><strong>Pincode:</strong> <%= addr.pincode %></p>
                                    </div>
                                <% }) %>
                            </div>
                            <input type="hidden" id="selectedAddressId" name="selectedAddressId" value="">
                        </form>
                    <% } else { %>


                        <p>No addresses found. Please add a new address.</p>
                    <% } %>
                </div>
                
                <a href="/add-new-address" class="btn btn-outline-primary w-100" style="background-color: #075173; color: white;">Add New Address</a>
            </div>

            <!-- Right Side - Order Summary -->
            <div class="col-lg-6">
                <h3 class="mb-4">Order Summary</h3>
                <% if (cartItems && cartItems.length > 0) { %>
                    <table class="table table-bordered order-summary-table">
                        <thead>
                            <tr>
                                <th>Item</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% let subtotal = 0; %>
                            <% cartItems.forEach(item => { %>
                                <% if (item.productId) { %>
                                    <tr>
                                        <td><%= item.productId.name %> (x<%= item.quantity %>)</td>
                                        <td> â‚¹<%= Math.round(item.productId.salePrice * item.quantity) %></td>
                                    </tr>
                                    <% subtotal += item.productId.salePrice * item.quantity; %>
                                <% } %>
                            <% }); %>
                            <tr>
                                <td><strong>Subtotal</strong></td>
                                <td id="subtotal"> â‚¹<%= Math.round(subtotal) %></td>
                            </tr>
                            <tr>
                                <td><strong>Shipping charge</strong></td>
                                <td id="shippingCost">(+) â‚¹<%= Math.round(shippingCost) %></td>
                            </tr>
                            <tr>
                                <td><strong>Discount</strong></td>
                                <td id="discountAmount">(-) â‚¹<%= Math.round(discountAmount || 0) %></td>
                            </tr>
                            <tr>
                                <td><strong>Total amount to pay</strong></td>
                                <th id="finalTotal"> â‚¹<%= Math.round(subtotal + shippingCost - (discountAmount || 0)) %></th>
                            </tr>
                             <!-- Hidden fields for JavaScript access -->
                             <input type="hidden" id="subtotalHidden" value="<%= subtotal.toFixed(2) %>">
                             <input type="hidden" id="shippingCostHidden" value="<%= shippingCost.toFixed(2) %>">
                             <input type="hidden" id="discountAmountHidden" value="<%= discountAmount ? discountAmount.toFixed(2) : '0.00' %>">
                             <input type="hidden" id="finalTotalHidden" value="<%= (subtotal + shippingCost - (discountAmount || 0)).toFixed(2) %>">
                             
                        </tbody>
                        
                    </table>
                <% } else { %>
                    <p>Your cart is empty. <a href="/">Go back to the shop</a>.</p>
                <% } %>

                <div class="mt-3">
                    <h5>Payment Method</h5>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="cashOnDelivery" value="cashOnDelivery" checked>
                        <label class="form-check-label" for="cashOnDelivery">Cash on Delivery</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input"  type="radio" name="paymentMethod" id="razorpay" value="razorpay">
                        <label class="form-check-label" for="razorpay">Razorpay</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="wallet">
                        <label class="form-check-label" for="wallet">Wallet</label>
                    </div>
                </div>
                
                
                <!-- Hidden button for Razorpay (will trigger when Razorpay is selected) -->
                <button id="razorpayBtn" class="btn btn-primary w-100 mt-4" style="display:none; background-color:  #075173; color: white;">Pay with Razorpay</button>
                
                <!-- Place Order Button -->
                <button type="button" id="placeOrderBtn" class="btn btn-primary w-100 mt-4"style="background-color:  #075173; color: white;">Place Order</button>
                <!-- Wallet Payment Button -->
                <button id="walletPayBtn" class="btn btn-primary w-100 mt-4" style="display:none; background-color:  #075173; color: white;">Pay with Wallet</button>

            </div>
        </div>
    </div>
    <!-- Footer 
    <footer class="bg-dark text-white text-center py-3 footer">
        <p class="m-0">Â© 2024 Fruitikha. All Rights Reserved.</p>
    </footer>-->

    <!-- JavaScript to handle address selection -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>

        function selectAddress(addressId) {
            // Highlight the selected address
            const addressCards = document.querySelectorAll('.address-card');
            addressCards.forEach(card => {
                card.classList.remove('selected-address');
            });

            const selectedCard = document.querySelector(`.address-card[onclick="selectAddress('${addressId}')"]`);
            if (selectedCard) {
                selectedCard.classList.add('selected-address');
            }

            // Set the selected address ID in the hidden input
            document.getElementById('selectedAddressId').value = addressId;
        }
    </script>

  <script>
document.addEventListener('DOMContentLoaded', () => {
    // Add event listeners to payment method radio buttons
    document.querySelectorAll('input[name="paymentMethod"]').forEach(input => {
        input.addEventListener('change', function () {
            if (this.value === 'razorpay') {
                document.getElementById('placeOrderBtn').style.display = 'none';
                document.getElementById('razorpayBtn').style.display = 'block';
                document.getElementById('walletPayBtn').style.display = 'none';
            } else if (this.value === 'cashOnDelivery') {
                document.getElementById('placeOrderBtn').style.display = 'block';
                document.getElementById('razorpayBtn').style.display = 'none';
                document.getElementById('walletPayBtn').style.display = 'none';
            } else if (this.value === 'wallet') {
                document.getElementById('walletPayBtn').style.display = 'block';
                document.getElementById('placeOrderBtn').style.display = 'none';
                document.getElementById('razorpayBtn').style.display = 'none';
            }
        });
    });



    // Handle Cash on Delivery order placement
    document.getElementById('placeOrderBtn').addEventListener('click', async function () {
        const selectedAddressId = document.getElementById('selectedAddressId').value;
        if (!selectedAddressId) {
            alert('Please select a shipping address.');
            return;
        }

        const finalTotal = parseFloat(document.getElementById('finalTotalHidden').value);
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

        if (paymentMethod === 'cashOnDelivery') {
            try {
                if (finalTotal > 1000) {
                
                Swal.fire({
                  
                    text: 'Cash on Delivery is not allowed for orders above â‚¹1000.',
                   
                    confirmButtonText: 'OK'
                });
                return; // Stop further execution
            }

                const response = await fetch('/place-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        addressId: selectedAddressId,
                        paymentMethod: paymentMethod,
                    }),
                });

                if (response.ok) {
                    // If the response is ok, redirect to the order success page
                    window.location.href = '/orderSuccess';
                } else {
                    const errorMessage = await response.text(); // Get error message from response
                    alert(`Order placement failed: ${errorMessage}`);
                }
            } catch (error) {
                console.error('Error placing order:', error);
                alert('An error occurred while placing your order. Please try again.');
            }
        }
    });

    // Handle Razorpay payment
    document.getElementById('razorpayBtn').addEventListener('click', async function () {
        const selectedAddressId = document.getElementById('selectedAddressId').value;
        if (!selectedAddressId) {
            alert('Please select a shipping address.');
            return;
        }
        const finalTotal = parseFloat(document.getElementById('finalTotalHidden').value);
    const orderAmount = finalTotal * 100; // Convert to paise for Razorpay

         
        // AJAX request to create a Razorpay order on the server-side
        try {
            const response = await fetch('/create-razorpay-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    amount: orderAmount,
                    addressId: selectedAddressId,
                })
            });

            const data = await response.json();
            console.log("Razorpay Order Response:", data); 

            const { orderId, key_id } = data;
            

            // Razorpay options setup
            const options = {
                key: key_id, 
                amount: orderAmount,
                currency: "INR",
                name: "Fruitikha",
                description: "Order Payment",
                order_id: orderId,
                handler: async function (response) {
                    // On successful payment
                    try {
                        const paymentResponse = await fetch('/verify-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                paymentId: response.razorpay_payment_id,
                                orderId: response.razorpay_order_id,
                                signature: response.razorpay_signature,
                                addressId: selectedAddressId,
                            })
                        });

                        const paymentData = await paymentResponse.json();
                        if (paymentData.success) {
                            alert('Payment successful!');
                            window.location.href = '/orderSuccess';
                        } else {
                            alert('Payment failed. Please try again.');
                        }
                    } catch (error) {
                        console.error('Error completing Razorpay payment:', error);
                        alert('An error occurred while completing your payment. Please try again.');
                    }
                },
                prefill: {
                    name: "<%= user.name %>",
                    email: "<%= user.email %>",
                    contact: "<%= user.phone %>"
                },
                theme: {
                    color: "#3399cc"
                }
            };

            const rzp1 = new Razorpay(options);
            rzp1.open();
            //failiure payment
            rzp1.on('payment.failed', function (response) {
    console.error('Payment failed:', response.error);
 
    // Show SweetAlert for payment failure
    Swal.fire({
        icon: 'error',
        title: 'Payment Failed',
        text: 'Your payment could not be processed. Please try again.',
        confirmButtonText: 'Go to My Orders',
    }).then(() => {
        console.log('Redirecting to My Orders...');
        window.location.href = '/myOrder'; // Redirect after alert confirmation
    });

    // Log failure details
    fetch('/payment-failure', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            error: response.error,
            orderId: response.error.metadata?.order_id || 'unknown_order', // Handle undefined order_id
        }),
    })
    .then(res => res.json())
    .then(data => console.log('Payment failure logged:', data))
    .catch(error => console.error('Error logging payment failure:', error));
});


        // Open Razorpay checkout
       rzp1.open();
    } catch (error) {
        console.error('Error creating Razorpay order:', error);
        alert('An error occurred while processing your payment. Please try again.');
    }
});
    

    
async function verifyPayment(response) {
    try {
        const paymentResponse = await fetch('/verify-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                paymentId: response.razorpay_payment_id,
                orderId: response.razorpay_order_id,
                signature: response.razorpay_signature,
                addressId: selectedAddressId, // Assuming selectedAddressId is available here
            })
        });

        const paymentData = await paymentResponse.json(); // Avoid redeclaring paymentData
        if (paymentData.success) {
            alert('Payment successful!');
            window.location.href = '/orderSuccess';
        } else {
            alert('Payment failed. Please try again.');
        }
    } catch (error) {
        console.error('Error completing Razorpay payment:', error);
        alert('An error occurred while completing your payment. Please try again.');
    }
}


document.getElementById('walletPayBtn').addEventListener('click', async function () {
    const selectedAddressId = document.getElementById('selectedAddressId').value;
    console.log("Selected Address ID:", selectedAddressId);

    if (!selectedAddressId) {
        alert('Please select a shipping address.');
        return;
    }

    const finalTotal = parseFloat(document.getElementById('finalTotalHidden').value);

    try {
        const response = await fetch('/pay-with-wallet', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                addressId: selectedAddressId,
                amount: finalTotal,
            }),
        });

        const data = await response.json();

        // Enhanced error handling
        if (!data.success) {
            // This will now show specific error messages like "Insufficient wallet balance"
            alert(data.message || 'Payment failed');
            return;
        }

        alert('Payment successful!');
        window.location.href = '/orderSuccess';

    } catch (error) {
        console.error('Error processing wallet payment:', error);
        alert('An error occurred while processing your wallet payment. Please try again.');
    }
});


});


async function applyCoupon() {
    const couponCode = document.getElementById('coupon-entered').value;

    try {
        const response = await fetch('/couponapply', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ code: couponCode })
        });

        const result = await response.json();

        if (response.ok) {
            document.getElementById('showcouponmessage').textContent = `Coupon applied! Discount: â‚¹${result.discountAmount.toFixed(2)}`;

            // Parse the current subtotal and shipping cost values
            const subtotal = parseFloat(document.getElementById('subtotal').textContent.replace('â‚¹', '').trim());
            const shippingCost = parseFloat(document.getElementById('shippingCost').textContent.replace('â‚¹', '').trim());

            // Calculate the final total after applying the discount
            const discountAmount = result.discountAmount;
            const finalTotal = subtotal + shippingCost - discountAmount;

            // Update the discount and final total in the HTML
            document.getElementById('discountAmount').textContent = `â‚¹${discountAmount.toFixed(2)}`;
            document.getElementById('finalTotal').textContent = `â‚¹${finalTotal.toFixed(2)}`;

            
            document.getElementById('finalTotalHidden').value = finalTotal;

        } else {
            document.getElementById('showcouponmessage').textContent = result.error || 'Invalid coupon.';
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        document.getElementById('showcouponmessage').textContent = 'Error applying coupon. Please try again.';
    }
}


async function deleteCoupon() {
    try {
        const response = await fetch('/deleteCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        const result = await response.json();

        if (response.ok) {
            document.getElementById('showcouponmessage').textContent = 'Coupon removed.';
            // Update price display to original price
        } else {
            document.getElementById('showcouponmessage').textContent = result.error || 'Failed to remove coupon.';
        }
    } catch (error) {
        console.error('Error removing coupon:', error);
        document.getElementById('showcouponmessage').textContent = 'Error removing coupon. Please try again.';
    }
}


document.querySelector('[href="/available"]').addEventListener('click', async function (e) {
    e.preventDefault(); 

    const userId = "<%= user.id %>"; 
    const orderTotal = "<%= totalCost %>"; 
 
    try {
        const response = await fetch(`/available?userId=${userId}&orderTotal=${orderTotal}`, {
            method: 'GET'
        });

        if (response.ok) {
            const coupons = await response.json();
            const couponTable = document.getElementById('coupon-table');
            document.getElementById("coupon-table").border= 3;
            couponTable.innerHTML = ''; // Clear any previous content

            // Create table headers
            const headerRow = document.createElement('tr');
            headerRow.innerHTML = `<th>Code&nbsp&nbsp</th><th>Discount&nbsp&nbsp</th><th>Expiry Date</th>`;
            couponTable.appendChild(headerRow);

            // Add rows for each available coupon
            coupons.forEach(coupon => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${coupon.code}</td>
                    <td>${coupon.value}</td>
                    <td>${new Date(coupon.expirationDate).toLocaleDateString()}</td>
                `;
                couponTable.appendChild(row);
            });


            document.getElementById('availableCoupons').classList.add('show');
        } else {
            console.error('Failed to fetch coupons');
            alert('No available coupons found.');
        }
    } catch (error) {
        console.error('Error fetching coupons:', error);
        alert('Could not fetch available coupons. Please try again later.');
    }
});
</script>
  <!-- Bootstrap JS and Popper.js -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>

<%- include("../../views/partials/user/footer") %>