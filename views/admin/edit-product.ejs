<%- include("../../views/partials/admin/header") %>
<head>
   <style>
       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }


       .thumbnail {
           margin-right: 10px;
       }
       .input-upload {
   position: relative;
}
.remove-icon {
    color: red;
    font-weight: bold;
    cursor: pointer;
    margin-left: 5px;
}


.error-message {
           color: red;
           display: none;
       }


   </style>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
</head>
   <section class="content-main">
       <div class="row">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title">Edit Product</h2>


               </div>
           </div>
           <div class="col-lg-6">
               <div class="card mb-4">


                   <div class="card-body">

                    <form method="post" action="/admin/editProduct/<%=product._id%>?_method=PUT" enctype="multipart/form-data"
                        onsubmit="return validateForm()">
                      <div class="mb-4">
                        <label for="product_name" class="form-label">Product Name</label>
                        <input type="text" name="name" value="<%=product.name%>" class="form-control border" id="product_name">
                        <div id="productName-error" class="error-message"></div>
                      </div>
                    
                      <div class="mb-4">
                        <label for="description" class="form-label">Description</label>
                        <input name="description" value="<%=product.description%>" class="form-control border" id="description">
                        <div id="description-error" class="error-message"></div>
                      </div>
                    
                      <div class="row">
                        <div class="col-lg-4">
                          <div class="mb-4">
                            <label for="price" class="form-label">Price</label>
                            <input placeholder="$" name="price" type="text" value="<%=product.price%>" class="form-control border" id="price">
                            <div id="Price-error" class="error-message"></div>
                          </div>
                        </div>
                      </div>
                    
                      <div class="row">
                        <div class="col-lg-4">
                          <div class="mb-4">
                            <label for="stock" class="form-label">Stock</label>
                            <input name="stock" value="<%=product.stock%>" class="form-control border" id="stock">
                            <div id="stock-error" class="error-message"></div>
                          </div>
                        </div>
                      </div>
  
                      <div class="card mb-4">
                        <div class="card-body">
                          <div class="row gx-2">
                            <div class="col-sm-6 mb-3">
                              <label for="category" class="form-label">Category</label>
                              <select class="form-select border" id="category" name="category" style="width: 150px;">
                                <% for (let i = 0; i < cat.length; i++) { %>
                                  <option value="<%= cat[i]._id %>" 
                                    <%= String(product.category) === String(cat[i]._id) ? 'selected' : '' %>>
                                    <%= cat[i].name %>
                                  </option>
                                <% } %>
                              </select>
                              <div id="category-error" class="error-message"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      
                      

    <div>
        <label for="imageInput">Images:</label>
        <input type="file" id="imageInput" accept="image/png, image/jpeg, image/jpg" multiple onchange="handleFileSelect(event)">
        <div id="images-error" class="error-message"></div>
    </div>

    <div id="addedImagesContainer">
        
    </div>
   <!-- <div id="addedImagesContainer">


<% if (product.images && product.images.length > 0) { %>
    <% product.images.forEach(function(image, index) { %>
        <div class="thumbnail">
            <img src="<%= image.url %>" alt="thumbnail" style="width: 50px; height: auto;">
            <span class="remove-icon" onclick="deleteSingleImage('<%= image.id %>', '<%= product._id %>')">Delete</span>
        </div>
    <% }) %>
<% } %>
</div>-->
<div class="card mb-2">
    <div class="card-header">
        <br>
      <h4>Existing images</h4>
    </div>
    <% for(let i=0;i<product.productImage.length;i++){ %>
    <div class="col-md-12">
      <div class="mb-4">
        <div class="col-12">
          <td>
            <input type="hidden" value="<%=product.productImage[i]%>" id="imageDatas">
            <img class="rounded" style="width: 50px; height: 60px;"
              src="/uploads/product-images/<%=product.productImage[i]%>" alt="">
            <i onclick="deleteSingleImage('<%=product.productImage[i]%>','<%=product._id%>')" style="position: absolute; margin-left: .5rem; cursor: pointer;"
              class="fa-thin fa-x"></i>
          </td>
        </div>
      </div>
    </div>
    <% } %>
<br>
<br>
<br>

    <div>
        <button class="btn btn-md rounded font-sm hover-up" id="updatebtn" type="submit" onclick="validateAndSubmit()">Update</button>
      </div>
</form>
</div>
</div>
</div>
</div>
</div>
</section>

<!-- Include CropperJS library -->
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script>
    const selectedImages = [];

    function validateAndSubmit() {
    if (validateForm()) {
        // Create a new FormData object
        const formData = new FormData();

        // Add other form fields to the FormData object (e.g., name, description, price, etc.)
        const name = document.getElementById('product_name').value.trim();
        const description = document.getElementById('description').value.trim();
        const price = document.getElementById('price').value.trim();
        const stock = document.getElementById('stock').value.trim();
        const category = document.getElementById('category').value.trim();

        formData.append('name', name);
        formData.append('description', description);
        formData.append('price', price);
        formData.append('stock', stock);
        formData.append('category', category);

        // Add the selected images to the FormData object
        selectedImages.forEach((file, index) => {
            formData.append(`image-${index}`, file); // Append each file with a unique key
        });

        // Send the FormData using AJAX or through a standard form submission
        fetch(`/admin/editProduct/<%=product._id%>?_method=PUT`, {
            method: 'POST',
            body: formData
        }).then(response => {
            if (response.ok) {
                window.location.reload();
            } else {
                // Handle errors
                console.error('Error submitting the form:', response.statusText);
            }
        }).catch(error => console.error('Form submission failed:', error));

        return false; // Prevent the default form submission
    }
    return false;
}


    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = '';
            element.style.display = 'none'; // Hide error messages
        });
    }

    function handleFileSelect(event) {
        const addedImagesContainer = document.getElementById("addedImagesContainer");
        addedImagesContainer.innerHTML = ""; // Clear previous thumbnails
        const files = event.target.files;

        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            selectedImages.push(file);
            const thumbnail = document.createElement("div");
            thumbnail.classList.add("thumbnail");

            const img = document.createElement("img");
            img.src = URL.createObjectURL(file);
            img.alt = "thumbnail";
            img.style.width = "50px";
            img.style.height = "auto";

            const removeIcon = document.createElement("span");
            removeIcon.classList.add("remove-icon");
            removeIcon.style.cursor = "pointer";


            removeIcon.innerHTML = "&times;";
            removeIcon.addEventListener("click", function () {
                const index = selectedImages.indexOf(file);
                if (index !== -1) {
                    selectedImages.splice(index, 1);
                }
                thumbnail.remove();
            });

            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);

            // Crop image functionality
            viewImage(file, i + 1); // Call viewImage to initialize cropping
        }
    }

    
    function viewImage(file, index) {
    const reader = new FileReader();
    reader.onload = function () {
        const img = document.createElement('img');
        img.src = reader.result;
        img.id = `imgView${index}`;

        const cropperContainer = document.createElement('div');
        cropperContainer.appendChild(img);
        document.getElementById("addedImagesContainer").appendChild(cropperContainer);

        const cropper = new Cropper(img, {
            aspectRatio: 1,
            viewMode: 1,
            background: false,
            autoCropArea: 1,
            zoomable: true
        });

        const saveButton = document.createElement('button');
        saveButton.innerText = 'Save Cropped Image';
        cropperContainer.appendChild(saveButton);

        saveButton.addEventListener('click', function () {
            const croppedCanvas = cropper.getCroppedCanvas();
            const fileName = `cropped-img-${Date.now()}-${index}.png`;

            croppedCanvas.toBlob((blob) => {
                if (blob) {
                    const croppedFile = new File([blob], fileName, { type: 'image/png' });

                    // Replace the original image with the cropped version
                    selectedImages[index] = croppedFile;

                    // Create a thumbnail for the cropped image
                    createThumbnail(croppedFile, index);

                    // Hide the cropping UI after saving
                    cropperContainer.style.display = 'none';
                }
            }, 'image/png', 1.0);
        });
    };
    reader.readAsDataURL(file);
}

    function deleteSingleImage(imageId, productId) {
        $.ajax({
            url: "/admin/deleteImage",
            method: "POST",
            data: { imageNameToServer: imageId, productIdToServer: productId },
            success: function (response) {
                if (response.status === true) {
                    window.location.reload();
                }
            }
        });
    }
</script>

<%- include("../../views/partials/admin/footer") %>
