<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
 </head>
 <style>
    .error-message {
    color: red;
    margin-top: 5px;
    display: none; 
}
 
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }
 
 
        .thumbnail {
            margin-right: 10px;
 
 
        }
 </style>
 <div class="container mt-5">
 
    <h2 class="mb-4">Add Product</h2>
<form action="/admin/addProducts" method="post" enctype="multipart/form-data" class="form-horizontal" onsubmit="return validateAndSubmit(event);">
     <div class="form-group row">
         <label for="name" class="col-sm-2 col-form-label">Product Name:</label>
         <div class="col-sm-10">
             <input type="text" class="form-control" id="name" name="name" placeholder="Product Name" required autocomplete="name">
         </div>
         <div id="productName-error" class="error-message"></div>

     </div>&nbsp;&nbsp;
     <div class="form-group row">
         <label for="description" class="col-sm-2 col-form-label">Description:</label>
         <div class="col-sm-10">
             <textarea class="form-control" id="description" name="description" placeholder="Product Description" required autocomplete="description"></textarea>
         </div>
         <div id="description-error" class="error-message"></div>

     </div>
     &nbsp;&nbsp;
     <div class="form-group row">
         <label for="price" class="col-sm-2 col-form-label">Price:</label>
         <div class="col-sm-10">
             <input type="number" class="form-control" id="price" name="price" placeholder="Price" required autocomplete="off">
         </div>
         <div id="price-error" class="error-message"></div>

     </div>
     &nbsp;&nbsp;
     <div class="form-group row">
         <label for="stock" class="col-sm-2 col-form-label">Stock:</label>
         <div class="col-sm-10">
             <input type="number" class="form-control" id="stock" name="stock" placeholder="stock" required autocomplete="off">
         </div>
         <div id="stock-error" class="error-message"></div>

     </div>
     &nbsp;&nbsp;

     <div class="form-group row">
        <label for="category" class="col-sm-2 col-form-label">&nbsp;Category:</label>
       
       &nbsp &nbsp &nbsp  <select class="form-select border" style="width: 150px;" id="category" name="category">
                    
            <%for(let i=0;i<cat.length;i++){%>
                       
            <option value="<%=cat[i].name%>">
                <%=cat[i].name%>
            </option>
           <%}%>
          
            
    </select>
    <div id="category-error" class="error-message"></div>
    </div>








  
<br><br>
  
     <div class="mb-2">
        &nbsp;&nbsp; <h4>&nbsp;&nbsp;Choose images (Maximum 3 images)</h4>
        
        <div class="border row">
            <div id="addedImagesContainer" class="thumbnails-container"></div>
        </div>
        
        <div id="imageInputsContainer">
            <div class="row">
                <div class="align-items-center" style="margin-bottom: 20px;">
                    <img src="" alt="" id="imgView1">
                    <input class="form-control image-input" type="file" name="images" id="input1"
                           accept="image/png, image/jpeg, image/jpg"
                           onchange="viewImage(event, 1)">
                    <div id="images-error-1" class="error-message"></div>
                </div>
                <div class="image-cropper d-flex align-items-center"
                     style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                    <img src="" id="croppedImg1" alt="">
                    <button type="button" id="saveButton1" class="btn-sm btn-primary">&nbsp;&nbsp;&nbsp;&nbsp;Save</button>
                </div>
            </div>
    
            <div class="row">
                <div class="align-items-center" style="margin-bottom: 20px;">
                    <img src="" alt="" id="imgView2">
                    <input class="form-control image-input" type="file" name="images" id="input2"
                           accept="image/png, image/jpeg, image/jpg"
                           onchange="viewImage(event, 2)">
                    <div id="images-error-2" class="error-message"></div>
                </div>
                <div class="image-cropper d-flex align-items-center"
                     style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                    <img src="" id="croppedImg2" alt="">
                    <button type="button" id="saveButton2" class="btn-sm btn-primary">&nbsp;&nbsp;&nbsp;&nbsp;Save</button>
                </div>
            </div>
    
            <div class="row">
                <div class="align-items-center" style="margin-bottom: 20px;">
                    <img src="" alt="" id="imgView3">
                    <input class="form-control image-input" type="file" name="images" id="input3"
                           accept="image/png, image/jpeg, image/jpg"
                           onchange="viewImage(event, 3)">
                    <div id="images-error-3" class="error-message"></div>
                </div>
                <div class="image-cropper d-flex align-items-center"
                     style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                    <img src="" id="croppedImg3" alt="">
                    <button type="button" id="saveButton3" class="btn-sm btn-primary">&nbsp;&nbsp;&nbsp;&nbsp;Save</button>
                </div>
            </div>
        </div>
    </div>
    
     <div class="form-group row">
         <div class="col-sm-10 offset-sm-2">
             <button type="submit" class="btn btn-primary">Add Product</button>
         </div>
     </div>
 </form>
 </div>

<script>

function validateAndSubmit(event) {
    event.preventDefault(); 
    
    if(validateForm()) {
        document.forms[0].submit();
    }
}
//image view handling
function viewImage1(event){
    document.getElementById("imgView1").src=URL.createObjectURL(event.target.files[0])
}
function viewImage2(event){
    document.getElementById("imgView2").src=URL.createObjectURL(event.target.files[0])
}
function viewImage3(event){
    document.getElementById("imgView3").src=URL.createObjectURL(event.target.files[0])
}

//image processing after processing
function viewImage(event, index) {
    let input = event.target;
    let reader = new FileReader();

    reader.onload = function () {
        let dataURL = reader.result;
        let image = document.getElementById("imgView" + index);
        image.src = dataURL;

        // Initialize Cropper
        let cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true
        });

        let cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
        cropperContainer.style.display = "block";

        let saveButton = document.querySelector('#saveButton' + index);
        saveButton.addEventListener('click', async function () {
            let croppedCanvas = cropper.getCroppedCanvas();
            let croppedImage = document.getElementById("croppedImg" + index);
            croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

            // Save the cropped image to the file input
            let timestamp = new Date().getTime();
            let fileName = `cropped-img-${timestamp}-${index}.png`;

            await croppedCanvas.toBlob(blob => {
                let input = document.getElementById('input' + index);
                let imgFile = new File([blob], fileName, { type: blob.type });
                const fileList = new DataTransfer();
                fileList.items.add(imgFile);
                input.files = fileList.files;

                const imagePath = '/uploads/product-images/' + fileName;
                croppedImage.src = imagePath;
            });

            
            cropperContainer.style.display = 'none';
            cropper.destroy();

            
            image.style.display = "none";

            
            croppedImage.style.display = "block";
        });
    };

    reader.readAsDataURL(input.files[0]);
}


function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    addedImagesContainer.innerHTML = "";
    const files = event.target.files;
    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        selectedImages.push(file);

        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.style.width = "50px";
        img.style.height = "auto";

        const removeIcon = document.createElement("span");
        removeIcon.classList.add("remove-icon");
        removeIcon.innerHTML = "&times;";
        removeIcon.addEventListener("click", function () {
            const index = selectedImages.indexOf(file);
            if (index !== -1) {
                selectedImages.splice(index, 1);
            }
            thumbnail.remove();
        });

        const thumbnail = document.createElement("div");
        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        addedImagesContainer.appendChild(thumbnail);
    }
}



function validateForm() {
    // Clear previous error messages
    clearErrorMessages();
    
    let isValid = true;
    
    // Validate Product Name
    const nameInput = document.getElementById('name');
    const name = nameInput.value.trim();
    const nameError = document.getElementById('productName-error');
    
    if (name === "") {
        nameError.textContent = 'Please enter a product name.';
        nameError.style.display = 'block';
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        nameError.textContent = 'Product name should contain only alphabetic characters.';
        nameError.style.display = 'block';
        isValid = false;
    }
    
    // Validate Description
    const descriptionInput = document.getElementById('description');
    const description = descriptionInput.value.trim();
    const descriptionError = document.getElementById('description-error');
    
    if (description === "") {
        descriptionError.textContent = 'Please enter a product description.';
        descriptionError.style.display = 'block';
        isValid = false;
    } 
    
    // Validate Stock
    const stockInput = document.getElementById('stock');
    const stockError = document.getElementById('stock-error');
    
    if (stockInput) {
        const stock = stockInput.value.trim();
        if (!/^\d+$/.test(stock) || parseInt(stock) <= 0) {
            stockError.textContent = 'Please enter a valid stock (positive integer).';
            stockError.style.display = 'block';
            isValid = false;
        }
    }
    
    // Validate Price
    const priceInput = document.getElementById('price');
    const price = priceInput.value.trim();
    const priceError = document.getElementById('price-error');
    
    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        priceError.textContent = 'Please enter a valid non-negative price.';
        priceError.style.display = 'block';
        isValid = false;
    }
    
    // Validate Images
    const images1 = document.getElementById('input1').files.length;
    const images2 = document.getElementById('input2').files.length;
    const images3 = document.getElementById('input3').files.length;
    const imagesError = document.getElementById('images-error-1');
    
    if (images1 === 0 && images2 === 0 && images3 === 0) {
        imagesError.textContent = 'Please select at least one image.';
        imagesError.style.display = 'block';
        isValid = false;
    }
    
    return isValid;
}
function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.textContent = message;
    errorElement.style.display = 'block';
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.style.display = 'none';
        element.textContent = '';
    });
}


</script>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<%- include("../../views/partials/admin/footer") %>