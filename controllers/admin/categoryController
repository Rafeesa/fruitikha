const Category = require('../../models/categorySchema');
const Product=require("../../models/productSchema")

// Display all categories
const getAllCategories = async (req, res) => {
    try {
        let search="";
        if(req.query.search)
            {
            search=req.query.search;
            }
        let page=1;
            if(req.query.page)
                {
                    page=parseInt(req.query.page) 
               }
         
        const limit=4
        const skip=(page-1)*limit
        const categories = await Category.find({
            $or: [
                { name: { $regex: ".*" + search + ".*", $options: 'i' } },
                { code: { $regex: ".*" + search + ".*", $options: 'i' } }
            ]
        })
        .sort({createdAt:-1})
        .skip(skip)
        .limit(limit)
        .exec()

        const totalCategory=await Category.find({
            $or: [
                { name: { $regex: ".*" + search + ".*", $options: 'i' } },
                { code: { $regex: ".*" + search + ".*", $options: 'i' } }
            ]
        }).countDocuments()
        const totalPages=Math.ceil(totalCategory/limit)

        res.render('categories',
            {cat:categories,
            currentPage:page,
            totalPages:totalPages,
            totalCategory:totalCategory
         

         });
    } catch (err) {
        console.error(err);
        res.redirect('/admin');
    }
};

// Show form to create a new category
const showNewCategoryForm = (req, res) => {
    res.render('addCategory');
};

// Create a new category
const createCategory = async (req, res) => {
    try {
        const { name, description, code } = req.body;
        const existingCategory = await Category.findOne({ name });

        if (existingCategory) {
            return res.status(400).json({
                status: "error",
                message: "Category already exists",
            });
        }

        const newCategory = new Category({ name, description, code });
        await newCategory.save();

        return res.status(200).json({
            status: "success",
            message: "Category added successfully",
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            status: "error",
            message: "Internal Server Error",
        });
    }
};

// Show edit form for a category
const showEditCategoryForm = async (req, res) => {
    try {
        const id=req.query.id
        const category = await Category.findOne({_id:id});
        res.render('editCategory', { category:category });
    } catch (err) {
        console.error(err);
        res.redirect('/admin/categories');
    }
};

// Update a category
const updateCategory = async (req, res) => {
    try {
        const id=req.params.id
        console.log('Updating category with ID:', req.params.id);
        console.log('Request body:', req.body);
        const { name, description, code } = req.body;
        const existingCategory=await Category.findOne({name:name})
        if(existingCategory){
            return res.status(400).json({error:"Category exists,please choose another name"})
        }
        const updateCategory=await Category.findByIdAndUpdate(id,{
            name:name,
            description:description,
            code:code
        },{new:true})

        if(updateCategory){
         res.redirect("/admin/category")   
        }
        else
        {
            res.status(404).json({error:"Category not found"})
        }

        
    } catch (err) {
        console.error(err);
        res.redirect('/admin/category');
    }
};

// Delete a category
const deleteCategory = async (req, res) => {
    try {
        // Find and delete the category
        const category = await Category.findByIdAndDelete(req.params.id);
    

        // Update products that were using this category
        await Product.updateMany(
            { category: req.params.id }, // Find products with this category ID
            { $set: { category: null } } // Set category to null or a default value
        );

        res.redirect('/admin/Category/');
    } catch (error) {
        console.error(error);
        res.status(500).send('Server Error');
    }
};

const addCategoryOffer =async(req,res)=>{
    try {
        const percentage=parseInt(req.body.percentage)
        const categoryId=req.body.categoryId;
        const category=await Category.findById(categoryId)
        if(!category){
            return res.status(404).json({status:false,message:"category not found"})
        }
        const products=await Product.find({category:category._id})
        const hasProductOffer=products.some((product)=>product.productOffer>percentage);
        if(hasProductOffer)
        {
            return res.json({status:false,message:"Product within this category already have product offer"})
        }
        await Category.updateOne({_id:categoryId},{$set:{categoryOffer:percentage}})

        for(const product of products){
            product.productOffer=0
            product.salePrice=product.price;
            await product.save();
        }
        res.json({status:true})
    } catch (error) {
        res.status(500).json({status:false,message:"Internal server error"})
    }
}


const removeCategoryOffer=async(req,res)=>{
   try {
    const categoryId=req.body.categoryId;
    const category=await Category.findById(categoryId)
    if(!category){
        return res.status(404).json({status:false,message:"category not found"})
    }
    const percentage=category.categoryOffer;
    const products=await Product.find({category:category._id})
        if(products.lenght>0)
        {
          for(const product of products){
            product.salePrice+=Math.floor(product.price*(percentage/100))
            product.productOffer=0
            await product.save();
          }  
        }
        category.categoryOffer=0;
        await category.save();
        res.status(200).json({ status: true });

    
   } catch (error) {
    console.error("Error removing offer:", error);
    res.status(500).json({ status: false, message: "Internal Server Error" });

   } 
}


module.exports={
    getAllCategories,
    showNewCategoryForm,
    createCategory,
    showEditCategoryForm,
    updateCategory,
    deleteCategory,
    addCategoryOffer, 
    removeCategoryOffer,
}